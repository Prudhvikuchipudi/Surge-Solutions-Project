{"version":3,"sources":["App.js","companyproducts/CompanyProductsList.js","ProductRec.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","uName","age","address","employmentStatus","goalOfLoan","loanAmount","income","handleChangeName","bind","assertThisInitialized","handleChangeAge","handleChangeAddress","handleChangeEmploymentStatus","handleChangeGoalOfLoan","handleChangeLoanAmount","handleChangeIncome","handleSubmit","event","setState","target","value","alert","preventDefault","react_default","a","createElement","className","onSubmit","type","name","onChange","selected","React","Component","CompanyProductList","CompanyProductData","map","companyDetail","index","id","ProductRec","CompanyProductsList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","src_ProductRec","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f0e0643d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {uName: '',age: '',address:'',employmentStatus:'',goalOfLoan:'',loanAmount:'',income:''};\n\n    this.handleChangeName = this.handleChangeName.bind(this);\n    this.handleChangeAge = this.handleChangeAge.bind(this);\n    this.handleChangeAddress = this.handleChangeAddress.bind(this);\n    this.handleChangeEmploymentStatus = this.handleChangeEmploymentStatus.bind(this);\n    this.handleChangeGoalOfLoan = this.handleChangeGoalOfLoan.bind(this);\n    this.handleChangeLoanAmount = this.handleChangeLoanAmount.bind(this);\n    this.handleChangeIncome = this.handleChangeIncome.bind(this);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChangeName(event) {\n    this.setState({uName: event.target.value});\n}\nhandleChangeAge(event) {\n  this.setState({age: event.target.value});\n}\nhandleChangeAddress(event) {\n  this.setState({address: event.target.value});\n}\nhandleChangeEmploymentStatus(event) {\n  this.setState({employmentStatus: event.target.value});\n}\nhandleChangeGoalOfLoan(event) {\n  this.setState({goalOfLoan: event.target.value});\n}\nhandleChangeLoanAmount(event) {\n  this.setState({loanAmount: event.target.value});\n}\nhandleChangeIncome(event) {\n  this.setState({income: event.target.value});\n}\n\n\n  handleSubmit(event) {\n    \n    alert('uName: ' + this.state.uName  + \"\\n\" +\"age: \"+ this.state.age+ \"\\n\"+\"address: \" + this.state.address+ \"\\n\"+\"employmentStatus: \" + this.state.employmentStatus+ \"\\n\"+\"goalOfLoan: \" + this.state.goalOfLoan+ \"\\n\"+\"loanAmount: \" + this.state.loanAmount+ \"\\n\"+\"income: \" + this.state.income );\n    event.preventDefault();\n  }\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"calc-wrapper\">\n        <form onSubmit = {this.handleSubmit}>\n        \n          <label>\n            Name: \n            <input type=\"text\" name=\"name\"  uName={this.state.value} onChange={this.handleChangeName} />\n            \n          </label>\n          \n          <br></br>\n          <label>\n            Age:\n            <input type=\"text\" name=\"age\" age={this.state.value} onChange={this.handleChangeAge} />\n          </label>\n          \n          <br></br>\n          <label>\n            Address:\n            <input type=\"text\" name=\"address\" address={this.state.value} onChange={this.handleChangeAddress}/>\n          </label>\n          <br></br>\n          <label>\n            Employment Status:\n            <input type=\"text\" name=\"employmentStatus\" employmentStatus={this.state.value} onChange={this.handleChangeEmploymentStatus}/>\n          </label>\n          <br></br>\n          <label>\n          Goal of Loan: \n          <select goalOfLoan = {this.state.value} onChange={this.handleChangeGoalOfLoan}>\n            \n            <option value=\"Home Loan\" >Home Loan</option>\n            <option  value=\"Car Loan\" >Car Loan</option>\n            <option selected value=\"Not Selected\" >Not Selected</option>\n            \n          </select>\n          </label>\n          <br></br>\n          <label>\n            Loan Amount:\n            <input type=\"text\" name=\"loanAmount\" loanAmount={this.state.value} onChange={this.handleChangeLoanAmount}/>\n          </label>\n          <br></br>\n          <label>\n            Income:\n            <input type=\"text\" name=\"income\" income={this.state.value} onChange={this.handleChangeIncome}/>\n          </label>\n          <br></br>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n        \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App","import React, { Component } from 'react';\nimport CompanyProductData from '../data/testcompanyproducts.json';\n//import AWS from 'aws-sdk';\n\n//Get list of objects, then find the correct object, then get the object, only then will we get the contents\n//Create a map /hash for trans union = /s3/surge-app/productguidelines\\\n//MAke sure bucket and objects in buclet are public\n//best practice to take create groups, and assign policies to groups, then add user to groups\n//resources - s3/ec2/lambda functions/could functions - create role, assign policy to role that will grant role to access needed\n//via sdk or cli through react app.\n//play around with permission - try retrieve reseoucres through different methods\n//cli oporate as a user\n//sdk oporate as application\n\n/*var s3 = new AWS.S3();\nvar params = {\n    Bucket: \"surge-app\",\n    MaxKeys: 2\n};\n\ns3.listObjects(params, function(err, data) {\n  if (err) console.log(err, err.stack); // an error occurred\n  else     console.log(data);           // successful response\n});*/\n\n//s3.getObject()\n\nclass CompanyProductList extends Component {\n    render() {\n        return (\n            <div >\n                {CompanyProductData.map((companyDetail, index)=>{\n                    return <div>\n                    <p>{companyDetail.id}</p>\n                    <p>{companyDetail.employmentStatus}</p>\n                    <p>{companyDetail.goalOfLoan}</p>\n                    <p>{companyDetail.loanAmount}</p>\n                    <p>{companyDetail.income}</p>\n                    </div>\n                })}\n            </div>\n        )\n    }\n}\n\n/*const aws = require('aws-sdk');\n\n(async function() {\n    try {\n        aws.config.setPromisesDependency();\n        aws.config.update({\n            accessKeyId: 'AKIAJTTKYCMOAKOJUGNA',\n            secretAccessKey: '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',\n            region: 'us-east-1'\n        });\n\n        const s3 = new aws.S3();\n        const response = await s3.listObjectsV2({\n            Bucket: 'surge-app',\n            Prefix: 'Product Guidelines'\n            \n        }).promise();\n        console.log(response);\n\n        const data = await s3.getObject({\n            Bucket: 'surge-app',\n            Key: 'Product Guidelines/testcompanyproducts.json'\n        }).promise();\n        console.log(data);\n        //var testdata = data;\n\n    } catch(e) {\n        console.log('our error', e);\n    }\n\n    debugger;\n\n})();*/\n\n/*class CompanyProductListv2 extends Component {\n    render() {\n        return (\n            <div >\n                <p>{console.log()}</p>\n            </div>\n        )\n    }\n}*/\n\nexport default CompanyProductList\n//export default CompanyProductListv2","import React, { Component } from 'react';\nimport CompanyProductList from './companyproducts/CompanyProductsList';\nimport './App.css';\n\nclass ProductRec extends React.Component {\n    render() {\n        return (\n            <div className=\"ProductRec\">\n                <CompanyProductList />\n            </div>\n        )\n    }\n}\nexport default ProductRec;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './index.css'\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ProductRec from './ProductRec';\nimport * as serviceWorker from './serviceWorker';\n\n//Display the Customer Information Submition Page\nReactDOM.render(<App />, document.getElementById('root'));\n\n//Display the Product Information\nReactDOM.render(<ProductRec  />, document.getElementById('container'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}